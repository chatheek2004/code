
package com.example.meetupp300
import android.content.Context
import android.graphics.*
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool
import com.bumptech.glide.load.resource.bitmap.BitmapTransformation
import com.bumptech.glide.request.RequestOptions
import java.security.MessageDigest
import java.text.SimpleDateFormat
import java.util.*

class UserGridAdapter(private var userList: List<UserGrid>) : RecyclerView.Adapter<UserGridAdapter.UserGridViewHolder>() {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserGridViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_user_grid, parent, false)
        return UserGridViewHolder(view)
    }

    override fun onBindViewHolder(holder: UserGridViewHolder, position: Int) {
        val user = userList[position]
        holder.bindUserGrid(user)
    }

    override fun getItemCount(): Int {
        return userList.size
    }

    fun setUserList(userList: List<UserGrid>) {
        this.userList = userList
        notifyDataSetChanged()
    }

    inner class UserGridViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val profileImageView: ImageView = itemView.findViewById(R.id.profileImageView)
        private val usernameTextView: TextView = itemView.findViewById(R.id.usernameTextView)
        private val genderTextView: TextView = itemView.findViewById(R.id.genderTextView)
        private val ageTextView: TextView = itemView.findViewById(R.id.ageTextView)
        private val distanceTextView: TextView = itemView.findViewById(R.id.distanceTextView)

        fun bindUserGrid(user: UserGrid) {
            // Load and circle crop profile image with frame using Glide
            Glide.with(itemView)
                .load(user.profileImageUrl)
                .apply(RequestOptions().transforms(CircleCropWithFrame(itemView.context)))
                .placeholder(R.drawable.errordp) // Placeholder image while loading
                .error(R.drawable.errordp) // Error image if loading fails
                .into(profileImageView)

            // Bind other user details
            usernameTextView.text = user.username
            genderTextView.text = user.gender
            ageTextView.text = calculateAge(user.birthdate)

            // Display distance if available
            if (user.distance.isNotEmpty() && user.distance != "N/A km away") {
                distanceTextView.visibility = View.VISIBLE
                distanceTextView.text = "${user.distance} km away"
            } else {
                distanceTextView.visibility = View.GONE
            }
        }
    }

    private fun calculateAge(birthdate: String): String {
        val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
        val birthDate = dateFormat.parse(birthdate)
        val cal = Calendar.getInstance()
        val currentDate = cal.time
        val diff = currentDate.time - birthDate.time
        var age = diff / (1000L * 60 * 60 * 24 * 365)

        // Ensure age is at least 18 and at most 90
        age = maxOf(18, age.toInt()).toLong()
        age = minOf(90, age)

        return age.toString()
    }

    // CircleCropWithFrame class for adding a circular frame around the circle-cropped image
    class CircleCropWithFrame(private val context: Context) : BitmapTransformation() {
        override fun transform(pool: BitmapPool, toTransform: Bitmap, outWidth: Int, outHeight: Int): Bitmap {
            val size = Math.min(toTransform.width, toTransform.height)
            val x = (toTransform.width - size) / 2
            val y = (toTransform.height - size) / 2

            val squaredBitmap = Bitmap.createBitmap(toTransform, x, y, size, size)
            val bitmap = pool.get(size, size, Bitmap.Config.ARGB_8888)

            val canvas = Canvas(bitmap)
            val paint = Paint()
            paint.shader = BitmapShader(squaredBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP)
            paint.isAntiAlias = true

            val radius = size / 2f
            canvas.drawCircle(radius, radius, radius, paint)

            squaredBitmap.recycle()
            return bitmap
        }

        override fun updateDiskCacheKey(messageDigest: MessageDigest) {
            // Implement to uniquely identify this transformation for caching purposes
        }
    }
}
